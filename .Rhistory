# Print the data frame
print(cor_df)
# Load necessary libraries
library(dplyr)
# Select specific columns for correlation calculation
selected_cols <- c("PatientID", "AppointmentID", "Gender", "ScheduledDate", "AppointmentDate",
"Age", "Neighbourhood", "SocialWelfare", "Hypertension", "Diabetes",
"AlcoholUseDisorder", "Disability", "SMSReceived", "NoShow")
# Filter your data frame to include only the selected columns
selected_data <- raw.data %>%
select(all_of(selected_cols))
# Convert all variables to numeric
numeric_data <- selected_data %>%
mutate(across(everything(), as.numeric))
# Calculate the correlation matrix
cor_matrix <- cor(numeric_data, use = "complete.obs")
# Convert the upper triangle of the correlation matrix to a data frame
cor_df <- as.data.frame(as.table(cor_matrix))
# Rename the columns
colnames(cor_df) <- c("Variable1", "Variable2", "Correlation")
# Filter out correlations with a value of 1
cor_df <- cor_df %>%
filter(abs(Correlation) < 1)
# Sort the data frame by absolute correlation values in descending order
cor_df <- cor_df %>%
arrange(desc(abs(Correlation)))
# Print the data frame
print(cor_df)
# Load necessary libraries
library(dplyr)
# Select specific columns for correlation calculation
selected_cols <- c("PatientID", "AppointmentID", "Gender", "ScheduledDate", "AppointmentDate",
"Age", "Neighbourhood", "SocialWelfare", "Hypertension", "Diabetes",
"AlcoholUseDisorder", "Disability", "SMSReceived", "NoShow")
# Filter your data frame to include only the selected columns
selected_data <- raw.data %>%
select(all_of(selected_cols))
# Convert all variables to numeric
numeric_data <- selected_data %>%
mutate(across(everything(), as.numeric))
# Calculate the correlation matrix
cor_matrix <- cor(numeric_data, use = "complete.obs")
# Convert the upper triangle of the correlation matrix to a data frame
cor_df <- as.data.frame(as.table(cor_matrix))
# Rename the columns
colnames(cor_df) <- c("Variable1", "Variable2", "Correlation")
# Filter out correlations with a value of 1 and variable pairs with the same name
cor_df <- cor_df %>%
filter(Variable1 != Variable2 & abs(Correlation) < 1)
# Take the absolute value of correlation coefficients
cor_df$Correlation <- abs(cor_df$Correlation)
# Sort the data frame by absolute correlation values in descending order
cor_df <- cor_df %>%
arrange(desc(Correlation))
# Print the data frame
print(cor_df)
# Load necessary libraries
library(dplyr)
# Select specific columns for correlation calculation
selected_cols <- c("PatientID", "AppointmentID", "Gender", "ScheduledDate", "AppointmentDate",
"Age", "Neighbourhood", "SocialWelfare", "Hypertension", "Diabetes",
"AlcoholUseDisorder", "Disability", "SMSReceived", "NoShow")
# Filter your data frame to include only the selected columns
selected_data <- raw.data %>%
select(all_of(selected_cols))
# Convert all variables to numeric
numeric_data <- selected_data %>%
mutate(across(everything(), as.numeric))
# Calculate the correlation matrix
cor_matrix <- cor(numeric_data, use = "complete.obs")
# Convert the upper triangle of the correlation matrix to a data frame
cor_df <- as.data.frame(as.table(cor_matrix))
# Rename the columns
colnames(cor_df) <- c("Variable1", "Variable2", "Correlation")
# Filter out correlations with a value of 1 and variable pairs with the same name
cor_df <- cor_df %>%
filter(Variable1 != Variable2 & abs(Correlation) < 1)
# Take the absolute value of correlation coefficients
cor_df$Correlation <- abs(cor_df$Correlation)
# Sort the data frame by absolute correlation values in descending order
cor_df <- cor_df %>%
arrange(desc(Correlation))
# Print the data frame
print(cor_df)
# Load necessary libraries
# Load necessary libraries
library(dplyr)
# Select specific columns for correlation calculation
selected_cols <- c("PatientID", "AppointmentID", "Gender", "ScheduledDate", "AppointmentDate",
"Age", "Neighbourhood", "SocialWelfare", "Hypertension", "Diabetes",
"AlcoholUseDisorder", "Disability", "SMSReceived", "NoShow")
# Filter your data frame to include only the selected columns
selected_data <- raw.data %>%
select(all_of(selected_cols))
# Convert all variables to numeric
numeric_data <- selected_data %>%
mutate(across(everything(), as.numeric))
# Calculate the correlation matrix
cor_matrix <- cor(numeric_data, use = "complete.obs")
# Get the upper triangle of the correlation matrix
upper_triangle <- cor_matrix[upper.tri(cor_matrix, diag = FALSE)]
# Convert the upper triangle to a data frame
cor_df <- as.data.frame(as.table(upper_triangle))
# Rename the columns
colnames(cor_df) <- c("Variable1", "Variable2", "Correlation")
# Load necessary libraries
library(dplyr)
# Select specific columns for correlation calculation
selected_cols <- c("PatientID", "AppointmentID", "Gender", "ScheduledDate", "AppointmentDate",
"Age", "Neighbourhood", "SocialWelfare", "Hypertension", "Diabetes",
"AlcoholUseDisorder", "Disability", "SMSReceived", "NoShow")
# Filter your data frame to include only the selected columns
selected_data <- raw.data %>%
select(all_of(selected_cols))
# Convert all variables to numeric
numeric_data <- selected_data %>%
mutate(across(everything(), as.numeric))
# Calculate the correlation matrix
cor_matrix <- cor(numeric_data, use = "complete.obs")
# Convert the upper triangle of the correlation matrix to a data frame
cor_df <- as.data.frame(as.table(cor_matrix))
# Rename the columns
colnames(cor_df) <- c("Variable1", "Variable2", "Correlation")
# Filter out correlations with a value of 1 and variable pairs with the same name
cor_df <- cor_df %>%
filter(Variable1 != Variable2 & abs(Correlation) < 1)
# Take the absolute value of correlation coefficients
cor_df$Correlation <- abs(cor_df$Correlation)
# Sort the data frame by absolute correlation values in descending order
cor_df <- cor_df %>%
arrange(desc(Correlation))
# Print the data frame
print(cor_df)
# Load necessary libraries
library(dplyr)
# Select specific columns for correlation calculation
selected_cols <- c("PatientID", "AppointmentID", "Gender", "ScheduledDate", "AppointmentDate",
"Age", "Neighbourhood", "SocialWelfare", "Hypertension", "Diabetes",
"AlcoholUseDisorder", "Disability", "SMSReceived", "NoShow")
# Filter your data frame to include only the selected columns
selected_data <- raw.data %>%
select(all_of(selected_cols))
# Convert all variables to numeric
numeric_data <- selected_data %>%
mutate(across(everything(), as.numeric))
# Calculate the correlation matrix
cor_matrix <- cor(numeric_data, use = "complete.obs")
# Get the upper triangle of the correlation matrix
upper_triangle <- cor_matrix[upper.tri(cor_matrix, diag = FALSE)]
# Convert the upper triangle to a data frame
cor_df <- as.data.frame(as.table(upper_triangle))
# Rename the columns
colnames(cor_df) <- c("Variable1", "Variable2", "Correlation")
# Load necessary libraries
library(dplyr)
# Select specific columns for correlation calculation
selected_cols <- c("PatientID", "AppointmentID", "Gender", "ScheduledDate", "AppointmentDate",
"Age", "Neighbourhood", "SocialWelfare", "Hypertension", "Diabetes",
"AlcoholUseDisorder", "Disability", "SMSReceived", "NoShow")
# Filter your data frame to include only the selected columns
selected_data <- raw.data %>%
select(all_of(selected_cols))
# Convert all variables to numeric
numeric_data <- selected_data %>%
mutate(across(everything(), as.numeric))
# Calculate the correlation matrix
cor_matrix <- cor(numeric_data, use = "complete.obs")
# Get the upper triangle of the correlation matrix
upper_triangle <- cor_matrix[upper.tri(cor_matrix, diag = FALSE)]
# Get the row and column indices for the upper triangle
indices <- which(upper.tri(cor_matrix, diag = FALSE), arr.ind = TRUE)
# Create a data frame from the upper triangle
cor_df <- data.frame(
Variable1 = rownames(cor_matrix)[indices[, 1]],
Variable2 = rownames(cor_matrix)[indices[, 2]],
Correlation = upper_triangle
)
# Filter out correlations with a value of 1
cor_df <- cor_df %>%
filter(abs(Correlation) < 1)
# Take the absolute value of correlation coefficients
cor_df$Correlation <- abs(cor_df$Correlation)
# Sort the data frame by absolute correlation values in descending order
cor_df <- cor_df %>%
arrange(desc(Correlation))
# Print the data frame
print(cor_df)
# Load necessary libraries
library(dplyr)
# Select specific columns for correlation calculation
selected_cols <- c("PatientID", "AppointmentID", "Gender", "ScheduledDate", "AppointmentDate",
"Age", "Neighbourhood", "SocialWelfare", "Hypertension", "Diabetes",
"AlcoholUseDisorder", "Disability", "SMSReceived", "NoShow")
# Filter your data frame to include only the selected columns
selected_data <- raw.data %>%
select(all_of(selected_cols))
# Convert all variables to numeric
numeric_data <- selected_data %>%
mutate(across(everything(), as.numeric))
# Calculate the correlation matrix
cor_matrix <- cor(numeric_data, use = "complete.obs")
# Get the upper triangle of the correlation matrix
upper_triangle <- cor_matrix[upper.tri(cor_matrix, diag = FALSE)]
# Get the row and column indices for the upper triangle
indices <- which(upper.tri(cor_matrix, diag = FALSE), arr.ind = TRUE)
# Create a data frame from the upper triangle
cor_df <- data.frame(
Variable1 = rownames(cor_matrix)[indices[, 1]],
Variable2 = rownames(cor_matrix)[indices[, 2]],
Correlation = upper_triangle
)
# Filter out correlations with a value of 1
cor_df <- cor_df %>%
filter(abs(Correlation) < 1)
# Take the absolute value of correlation coefficients
cor_df$Correlation <- abs(cor_df$Correlation)
# Sort the data frame by absolute correlation values in descending order
cor_df <- cor_df %>%
arrange(desc(Correlation))
# Print the data frame
print(head(cor_df))
upper_triangle <- cor_matrix[upper.tri(cor_matrix, diag = FALSE)]
# Get the row and column indices for the upper triangle
indices <- which(upper.tri(cor_matrix, diag = FALSE), arr.ind = TRUE)
# Create a data frame from the upper triangle
cor_df <- data.frame(
Variable1 = rownames(cor_matrix)[indices[, 1]],
Variable2 = rownames(cor_matrix)[indices[, 2]],
Correlation = upper_triangle
)
# Filter out correlations with a value of 1
cor_df <- cor_df %>%
filter(abs(Correlation) < 1)
# Take the absolute value of correlation coefficients
cor_df$Correlation <- abs(cor_df$Correlation)
# Sort the data frame by absolute correlation values in descending order
cor_df <- cor_df %>%
arrange(desc(Correlation))
# Print the data frame
print(head(cor_df,n = 10))
upper_triangle <- cor_matrix[upper.tri(cor_matrix, diag = FALSE)]
indices <- which(upper.tri(cor_matrix, diag = FALSE), arr.ind = TRUE)
cor_df <- data.frame(
Variable1 = rownames(cor_matrix)[indices[, 1]],
Variable2 = rownames(cor_matrix)[indices[, 2]],
Correlation = upper_triangle
)
cor_df <- cor_df %>%
filter(abs(Correlation) < 1)
cor_df$Correlation <- abs(cor_df$Correlation)
cor_df <- cor_df %>%
arrange(desc(Correlation))
##Top 10 absolute values
print(head(cor_df,n = 10))
results <- data.frame(Feature = rownames(varImp(rf.model)$importance)[1:10],
Importance = varImp(rf.model)$importance[1:10, ])
raw.data$Gender <- as.factor(raw.data$Gender)
raw.data$Neighbourhood <- as.factor(raw.data$Neighbourhood)
raw.data$NoShow <- as.factor(raw.data$NoShow)
# let's define a plotting function
corplot = function(df){
cor_matrix_raw <- round(cor(df),2)
cor_matrix <- melt(cor_matrix_raw)
#Get triangle of the correlation matrix
#Lower Triangle
get_lower_tri<-function(cor_matrix_raw){
cor_matrix_raw[upper.tri(cor_matrix_raw)] <- NA
return(cor_matrix_raw)
}
# Upper Triangle
get_upper_tri <- function(cor_matrix_raw){
cor_matrix_raw[lower.tri(cor_matrix_raw)]<- NA
return(cor_matrix_raw)
}
upper_tri <- get_upper_tri(cor_matrix_raw)
# Melt the correlation matrix
cor_matrix <- melt(upper_tri, na.rm = TRUE)
# Heatmap Plot
cor_graph <- ggplot(data = cor_matrix, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "darkorchid", high = "orangered", mid = "grey50",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 8, hjust = 1))+
coord_fixed()+ geom_text(aes(Var2, Var1, label = value), color = "black", size = 2) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank())+
ggtitle("Correlation Heatmap")+
theme(plot.title = element_text(hjust = 0.5))
cor_graph
}
numeric.data = mutate_all(raw.data, function(x) as.numeric(x))
# Plot Correlation Heatmap
corplot(numeric.data)
ggplot(raw.data) +
geom_density(aes(x=Age, fill=NoShow), alpha=0.8) +
ggtitle("Density of Age by Attendence")
ggplot(raw.data) +
geom_bar(aes(x=SMSReceived, fill=NoShow), alpha=0.8) +
ggtitle("Attendance by SMS Received")
ggplot(raw.data) +
geom_bar(aes(x=SMSReceived, fill=NoShow), position='fill', alpha=0.8) +
ggtitle("Proportion Attendance by SMS Received")
ggplot(raw.data) +
geom_bar(aes(x=SMSReceived, fill=NoShow), alpha=0.8) +
ggtitle("Attendance by SMS Received")
ggplot(raw.data) +
geom_bar(aes(x=SMSReceived, fill=NoShow), position='fill', alpha=0.8) +
ggtitle("Proportion Attendance by SMS Received")+
ylab("Proportion")
ggplot(raw.data) +
geom_bar(aes(x=Disability, fill=NoShow), position='fill', alpha=0.8) +
ggtitle("Proportion Attendance by disability") +
ylab("proportion")
raw.data$NoShow <- factor(raw.data$NoShow)
raw.data$Disability <- factor(raw.data$Disability)
ggplot(raw.data, aes(x =Disability, fill =NoShow)) +
geom_density(alpha = 0.8) +
ggtitle("Density of NoShow across Disability Values") +
xlab("Disability") +
ylab("Density")
ggplot(raw.data) +
geom_bar(aes(x=Disability, fill=NoShow), alpha=0.8) +
ggtitle("Attendance by SMS Received")
ggplot(raw.data) +
geom_bar(aes(x=Disability, fill=NoShow), position='fill', alpha=0.8) +
ggtitle("Proportion Attendance by disability") +
ylab("proportion")
raw.data$NoShow <- factor(raw.data$NoShow)
raw.data$Disability <- factor(raw.data$Disability)
ggplot(raw.data, aes(x =Disability, fill =NoShow)) +
geom_density(alpha = 0.8) +
ggtitle("Density of NoShow across Disability Values") +
xlab("Disability") +
ylab("Density")
raw.data <- raw.data %>% mutate(Age.Range=cut_interval(Age, length=10))
ggplot(raw.data) +
geom_bar(aes(x=Age.Range, fill=NoShow)) +
ggtitle("Amount of No Show across Age Ranges")
ggplot(raw.data) +
geom_bar(aes(x=Age.Range, fill=NoShow), position='fill') +
ggtitle("Proportion of No Show across Age Ranges")
ggplot(raw.data) +
geom_bar(aes(x=SMSReceived, fill=NoShow), alpha=0.8) +
ggtitle("Attendance by SMS Received")
ggplot(raw.data) +
geom_bar(aes(x=SMSReceived, fill=NoShow), position='fill', alpha=0.8) +
ggtitle("Proportion Attendance by SMS Received")+
ylab("Proportion")
ggplot(raw.data) +
geom_bar(aes(x = Age.Range, fill = NoShow)) +
facet_wrap(~ SMSReceived) +
ggtitle("Count of No Show across Age Ranges with  NoShow and SMSReceived")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Second plot
ggplot(raw.data) +
geom_bar(aes(x = Age.Range, fill = NoShow), position = 'fill') +
facet_wrap(~ SMSReceived) +
ggtitle("Proportion of No Show across Age Ranges with NoShow and SMSReceived ")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(raw.data) +
geom_density(aes(x=Age, fill=NoShow), alpha=0.8) +
ggtitle("Density of Age by Attendence")
ggplot(raw.data) +
geom_bar(aes(x=Disability, fill=NoShow), alpha=0.8) +
ggtitle("Attendance by SMS Received")
ggplot(raw.data) +
geom_bar(aes(x=Disability, fill=NoShow), position='fill', alpha=0.8) +
ggtitle("Proportion Attendance by disability") +
ylab("proportion")
raw.data$NoShow <- factor(raw.data$NoShow)
raw.data$Disability <- factor(raw.data$Disability)
ggplot(raw.data, aes(x =Disability, fill =NoShow)) +
geom_density(alpha = 0.8) +
ggtitle("Density of NoShow across Disability Values") +
xlab("Disability") +
ylab("Density")
table(raw.data$Disability,raw.data$NoShow)
ggplot(raw.data) +
geom_bar(aes(x=Disability, fill=NoShow), position='fill', alpha=0.8) +
ggtitle("Proportion Attendance by disability") +
ylab("proportion")
raw.data$NoShow <- factor(raw.data$NoShow)
raw.data$Disability <- factor(raw.data$Disability)
ggplot(raw.data, aes(x =Disability, fill =NoShow)) +
geom_density(alpha = 0.8) +
ggtitle("Density of NoShow across Disability Values") +
xlab("Disability") +
ylab("Density")
table(raw.data$Disability,raw.data$NoShow)
ggplot(raw.data) +
geom_bar(aes(x=SocialWelfare, fill=NoShow))+
ggtitle("SocialWelfare by attendance")
ggplot(raw.data) +
geom_bar(aes(x=SocialWelfare, fill=NoShow), position='fill')+
ggtitle("Proportion SocialWelfare by attendance")
ggplot(raw.data) +
geom_bar(aes(x=SocialWelfare, fill=NoShow))+
ggtitle("SocialWelfare by attendance")
ggplot(raw.data) +
geom_bar(aes(x=SocialWelfare, fill=NoShow), position='fill')+
ggtitle("Proportion SocialWelfare by attendance")+
ylab("Proportion")
raw.data <- raw.data %>% mutate(AppointmentDay = wday(AppointmentDate, label=TRUE, abbr=TRUE),
ScheduledDay = wday(ScheduledDate,  label=TRUE, abbr=TRUE))
ggplot(raw.data) +
geom_bar(aes(x=AppointmentDay, fill=NoShow)) +
ggtitle("Amount of No Show across Appointment Day")
ggplot(raw.data) +
geom_bar(aes(x=AppointmentDay, fill=NoShow), position = 'fill') +
ggtitle("Proportion of No Show across Appointment Day")
raw.data <- raw.data %>% mutate(Lag.days=difftime(AppointmentDate, ScheduledDate, units = "days"),
Lag.hours=difftime(AppointmentDate, ScheduledDate, units = "hours"))
ggplot(raw.data) +
geom_density(aes(x=Lag.days, fill=NoShow), alpha=0.7)+
ggtitle("Density of Lag (days) by attendance")
fit.control <- trainControl(method="cv",number=3, classProbs = TRUE, summaryFunction = twoClassSummary)
xgb.grid <- expand.grid(eta=c(0.05),
max_depth=c(4),colsample_bytree=1,
subsample=1, nrounds=500, gamma=0, min_child_weight=5)
xgb.model <- train(NoShow ~ .,data=train, method="xgbTree",metric="ROC",
tuneGrid=xgb.grid, trControl=fit.control)
### REMOVE SUBSAMPLING FOR FINAL MODEL
data.prep <- raw.data %>% select(-AppointmentID, -PatientID) #%>% sample_n(10000)
set.seed(42)
data.split <- initial_split(data.prep, prop = 0.7)
train  <- training(data.split)
test <- testing(data.split)
fit.control <- trainControl(method="cv",number=3, classProbs = TRUE, summaryFunction = twoClassSummary)
xgb.grid <- expand.grid(eta=c(0.05),
max_depth=c(4),colsample_bytree=1,
subsample=1, nrounds=500, gamma=0, min_child_weight=5)
xgb.model <- train(NoShow ~ .,data=train, method="xgbTree",metric="ROC",
tuneGrid=xgb.grid, trControl=fit.control)
xgb.pred <- predict(xgb.model, newdata=test)
xgb.probs <- predict(xgb.model, newdata=test, type="prob")
test <- test %>% mutate(NoShow.numerical = ifelse(NoShow=="Yes",1,0))
confusionMatrix(xgb.pred, test$NoShow, positive="Yes")
paste("XGBoost Area under ROC Curve: ", round(auc(test$NoShow.numerical, xgb.probs[,2]),3), sep="")
xgb.probs$Actual = test$NoShow.numerical
xgb.probs$ActualClass = test$NoShow
xgb.probs$PredictedClass = xgb.pred
xgb.probs$Match = ifelse(xgb.probs$ActualClass == xgb.probs$PredictedClass,
"Correct","Incorrect")
# [4.8] Plot Accuracy
xgb.probs$Match = factor(xgb.probs$Match,levels=c("Incorrect","Correct"))
ggplot(xgb.probs,aes(x=Yes,y=Actual,color=Match))+
geom_jitter(alpha=0.2,size=0.25)+
scale_color_manual(values=c("grey40","orangered"))+
ggtitle("Visualizing Model Performance", "(Dust Plot)")
results = data.frame(Feature = rownames(varImp(xgb.model)$importance)[1:10],
Importance = varImp(xgb.model)$importance[1:10,])
results$Feature = factor(results$Feature,levels=results$Feature)
# [4.10] Plot Variable Importance
ggplot(results, aes(x=Feature, y=Importance,fill=Importance))+
geom_bar(stat="identity")+
scale_fill_gradient(low="grey20",high="orangered")+
ggtitle("XGBoost Variable Importance")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(randomForest)
library(doParallel)
library(foreach)
cl <- makeCluster(detectCores())
registerDoParallel(cl)
# grid for randomForest
rf.grid <- expand.grid(mtry = c(2, 3, 4))
rf.model <- train(NoShow ~ .,
data = train,
method = "rf",
metric = "ROC",
tuneGrid = rf.grid,
trControl = fit.control,
ntree = 10)
stopCluster(cl)
registerDoSEQ()
print(rf.model)
# Make predictions
rf.pred <- predict(rf.model, newdata = test)
rf.probs <- predict(rf.model, newdata = test, type = "prob")
# Make predictions
rf.pred <- predict(rf.model, newdata = test)
rf.probs <- predict(rf.model, newdata = test, type = "prob")
test <- test %>% mutate(NoShow.numerical = ifelse(NoShow=="Yes",1,0))
confusionMatrix(rf.pred, test$NoShow, positive="Yes")
paste("Radom Forest Area under ROC Curve: ", round(auc(test$NoShow.numerical, rf.probs[,2]),3), sep="")
rf.probs$Actual = test$NoShow.numerical
rf.probs$ActualClass = test$NoShow
rf.probs$PredictedClass = rf.pred
rf.probs$Match = ifelse(rf.probs$ActualClass == rf.probs$PredictedClass, "Correct", "Incorrect")
rf.probs$Match = factor(rf.probs$Match, levels = c("Incorrect", "Correct"))
ggplot(rf.probs, aes(x = Yes, y = Actual, color = Match)) +
geom_jitter(alpha = 0.2, size = 0.25) +
scale_color_manual(values = c("grey40", "orangered")) +
ggtitle("Visualizing Model Performance", subtitle = "Dust Plot")
results <- data.frame(Feature = rownames(varImp(rf.model)$importance)[1:10],
Importance = varImp(rf.model)$importance[1:10, ])
results <- results %>%
arrange(desc(Importance)) %>%
mutate(Feature = factor(Feature, levels = Feature))
# variable importance
ggplot(results, aes(x = Feature, y = Importance, fill = Importance)) +
geom_bar(stat = "identity") +
scale_fill_gradient(low = "grey20", high = "orangered") +
ggtitle("Random Forest Variable Importance") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
